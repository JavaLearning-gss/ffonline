{"version":3,"sources":["component/LangLink.js","screen/Login.js","screen/Test.js","screen/Test2.js","App.js","serviceWorker.js","store/AppState.js","i18n.js","index.js"],"names":["LangLink","translate","inject","withRouter","observer","lang","this","props","i18n","changeLanguage","className","onClick","setLang","Component","Login","t","main","title","store","appname","Test","state","workerPath","location","href","replace","split","pop","buffersReady","workerReady","posted","worker","blob","URL","createObjectURL","Blob","type","Worker","revokeObjectURL","files","file","coverBlob","console","log","audioBlob","setState","fileReader1","FileReader","onload","e","cover_data","target","result","audio_data","postMessage","fileReader2","readAsArrayBuffer","processInWebWorker","onmessage","event","message","data","JSON","stringify","PostBlob","arguments","Uint8Array","name","FileSaver","fileTypes","handleFiles","cover_uploaded","large","icon","audio_uploaded","convert","show_loading","download_url","to","info","Test2","ts1Blob","ts2Blob","ts1_data","ts2_data","TextEncoder","encode","ts1_uploaded","ts2_uploaded","App","path","component","Boolean","window","hostname","match","observable","use","Backend","LanguageDetector","reactI18nextModule","init","fallbackLng","ns","defaultNS","debug","saveMissing","missingKeyHandler","lng","key","params","URLSearchParams","append","axios","post","dev_api","interpolation","escapeValue","react","wait","ReactDOM","render","AppState","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.54787058.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { observer , inject } from 'mobx-react';\nimport { withRouter } from 'react-router-dom';\nimport { translate } from 'react-i18next';\n\n@withRouter\n@translate()\n@inject(\"store\")\n@observer\nexport default class LangLink extends Component\n{\n    setLang( lang )\n    {\n        this.props.i18n.changeLanguage( lang );\n    }\n    render()\n    {\n        return <div>\n            <span className=\"pointer\" onClick={()=>this.setLang('zh-cn')}>中文</span> · <span className=\"pointer\" onClick={()=>this.setLang('en')}>English</span>\n        </div>;\n    }\n}","import React, { Component } from 'react';\nimport { observer , inject } from 'mobx-react';\nimport { withRouter,Link } from 'react-router-dom';\nimport { translate } from 'react-i18next';\nimport LangLink from '../component/LangLink'; \nimport DocumentTitle from 'react-document-title';\n\n@withRouter\n@translate()\n@inject(\"store\")\n@observer\nexport default class Login extends Component\n{\n    render()\n    {\n        const { t } = this.props;\n        const main = <div className=\"box\">\n            <div className=\"title\">{t(\"Welcome\")}</div>\n            <div className=\"lang\"> <LangLink /></div>\n        </div>;\n        return <DocumentTitle title={this.props.store.appname}>{main}</DocumentTitle>;\n    }\n}","import React, { Component } from 'react';\nimport { observer , inject } from 'mobx-react';\nimport { Link } from \"react-router-dom\";\nimport { withRouter } from 'react-router-dom';\nimport { translate } from 'react-i18next';\n\nimport DocumentTitle from 'react-document-title';\nimport ReactFileReader from 'react-file-reader';\n\nimport { Button, ProgressBar } from \"@blueprintjs/core\";\nimport FileSaver from 'file-saver';\n\n@withRouter\n@translate()\n@inject(\"store\")\n@observer\nexport default class Test extends Component\n{\n    state = {\"download_url\":false,\"show_loading\":false};\n    \n    componentDidMount()\n    {\n        this.workerPath = location.href.replace(location.href.split('/').pop(), '') + 'ffmpeg_all.js';\n        this.buffersReady = false ;\n        this.workerReady = false ;\n        this.posted = false;\n        this.worker = false;\n    }\n\n    processInWebWorker() \n    {\n        var blob = URL.createObjectURL(new Blob([`\n        importScripts(\"${this.workerPath}\");\n        var now = Date.now;\n        function print(text) \n        {\n            postMessage({\"type\" : \"stdout\",\"data\" : text});};\n            onmessage = function(event)\n            {\n                var message = event.data;\n                if (message.type === \"command\") \n                {\n                    var Module = {print: print,printErr: print,files: message.files || [],arguments: message.arguments || [],TOTAL_MEMORY: 943718400};\n                    \n                    postMessage({\"type\" : \"start\",\"data\" : Module.arguments.join(\" \")});\n                    \n                    postMessage({\"type\" : \"stdout\",\"data\" : \"Received command: \" +Module.arguments.join(\" \") +((Module.TOTAL_MEMORY) ? \".  Processing with \" + Module.TOTAL_MEMORY + \" bits.\" : \"\")});var time = now();var result = ffmpeg_run(Module);var totalTime = now() - time;postMessage({\"type\" : \"stdout\",\"data\" : \"Finished processing (took \" + totalTime + \"ms)\"});postMessage({\"type\" : \"done\",\"data\" : result,\"time\" : totalTime});}};postMessage({\"type\" : \"ready\"});`], {\n            type: 'application/javascript'\n        }));\n    \n        var worker = new Worker(blob);\n        URL.revokeObjectURL(blob);\n        return worker;\n    }\n    \n    cover_uploaded( files )\n    {\n        const file = files[0];\n        this.coverBlob = new Blob([file],{type:'image/jpeg'}); \n\n        console.log( file );\n    }\n\n    audio_uploaded( files )\n    {\n        const file = files[0];\n        this.audioBlob = new Blob([file],{type:'audio/mp3'}); \n        console.log( file );\n    }\n\n    convert()\n    {\n        this.setState({\"show_loading\":true});\n        \n        var fileReader1 = new FileReader();\n        fileReader1.onload = (e)=> {\n            console.log( e );\n            \n            this.cover_data = e.target.result;\n            if( this.audio_data ) this.buffersReady = true;\n            if( this.buffersReady && this.workerReady && !this.posted )\n                this.postMessage();\n        };\n\n        var fileReader2 = new FileReader();\n        fileReader2.onload = (e)=> {\n            this.audio_data = e.target.result;\n            if( this.cover_data ) this.buffersReady = true;\n            if( this.buffersReady && this.workerReady && !this.posted )\n                this.postMessage();\n        };\n\n        // console.log( typeof this.coverBlob )\n\n        fileReader1.readAsArrayBuffer(this.coverBlob);\n        fileReader2.readAsArrayBuffer(this.audioBlob);\n        //console.log( \"convert\" );\n        if( !this.worker )\n        {\n            this.worker = this.processInWebWorker();\n        }\n\n        this.worker.onmessage = (event)=> \n        {\n            var message = event.data;\n            if (message.type == \"ready\") \n            {\n                log('<a href=\"'+ this.workerPath +'\" download=\"ffmpeg-asm.js\">ffmpeg-asm.js</a> file has been loaded.');\n                this.workerReady = true;\n\n                if (this.buffersReady) \n                    this.postMessage();\n                else\n                    console.log( \"buffer is not ready\" );\n            \n            } \n            else if (message.type == \"stdout\") \n            {\n                log(message.data);\n            }\n            else if (message.type == \"start\") \n            {\n                this.setState({\"show_loading\":true});\n                log('<a href=\"'+ this.workerPath +'\" download=\"ffmpeg-asm.js\">ffmpeg-asm.js</a> file received ffmpeg command.');\n            }\n            else if (message.type == \"done\") \n            {\n                console.log(JSON.stringify(message));\n    \n                var result = message.data[0];\n                console.log(JSON.stringify(result));\n    \n                var blob = new Blob([result.data], {\n                    type: 'video/mp4'\n                });\n    \n                //console.log(JSON.stringify(blob));\n    \n                this.PostBlob(blob);\n            }\n        };\n    }\n\n    postMessage() \n    {\n        console.log( \"in  post message\" );\n        this.posted = true;\n\t\t\n\t\t/*\n\t\t\t[\n                '-i', 'video.webm',\n                '-i', 'audio.wav',\n\t\t\t\t'-s', '1280x720',\n                '-c:v', 'mpeg4',\n                '-c:a', 'aac',\n                '-b:v', '1450k',\n                '-b:a', '96k',\n\t\t\t\t'-bf', '2',\n\t\t\t\t'-g', '90',\n\t\t\t\t'-sc_threshold', '0',\n\t\t\t\t'-ar', '32000',\n                '-strict', 'experimental', 'output.mp4'\n            ]\n\t\t*/\n\t\t\n\t\tthis.worker.postMessage({\n            type: 'command',\n            arguments: [\n                '-loop', '1',\n                '-i', 'cover.jpg',\n                '-i', 'audio.mp3',\n                '-q:v', '1',\n               // '-c:a', 'copy', // or aac\n                '-c:a', 'aac',\n                '-b:v', '1450k',\n                '-b:a', '96k',\n\t\t\t\t'-bf', '2',\n\t\t\t\t'-g', '90',\n\t\t\t\t'-sc_threshold', '0',\n                '-ar', '32000',\n                // aac\n                '-strict','-2',\n                '-shortest',\n                'output.mp4'\n            ],\n            files: [\n                {\n                    data: new Uint8Array(this.cover_data),\n                    name: 'cover.jpg',\n                    type:'image/jpeg'\n                },\n                {\n                    data: new Uint8Array(this.audio_data),\n                    name: 'audio.mp3',\n                    type:'audio/mp3'\n                }\n            ]\n        });\n    };\n\n    PostBlob(blob)\n    {\n        \n        FileSaver( blob , 'merged.mp4' );\n        this.posted = false;\n        this.setState({\"show_loading\":false});\n        console.log( \"done\" );\n        \n        ///this.setState( {\"download_url\":URL.createObjectURL(blob)} )\n    }\n    \n    render()\n    {\n        const main = <div>\n            \n            <div className=\" center-800 top-100\">\n            <h1>jpg + mp3 合成 mp4</h1>\n            <div className=\"oneline\">\n                <div className=\"left\"> <ReactFileReader fileTypes={[\".jpg\"]} handleFiles={(e)=>this.cover_uploaded(e)}>\n            <Button large={true} icon=\"media\">选择一张jpg图片</Button>\n            </ReactFileReader></div>\n                <div className=\"middle\">\n                <ReactFileReader fileTypes={[\".mp3\"]} handleFiles={(e)=>this.audio_uploaded(e)}>\n            <Button large={true} icon=\"music\">选择一个mp3</Button>\n            </ReactFileReader>\n                </div>\n                <div className=\"right\">\n                <Button large={true} icon=\"build\" onClick={()=>this.convert()}>开始合成</Button>\n                </div>\n            </div>\n\n            <div className=\"row center-800 top-20\">\n               {this.state.show_loading && <ProgressBar/> }\n            </div>\n\n            <div className=\"row center-800\">\n                { this.state.download_url && <a href={this.state.download_url}>Download Recorded Audio+Canvas file in MP4 container and play in VLC player!</a> }\n            </div>\n\n            <div className=\"link top-20\"><Link to=\"/t2\" >两个mp4合成一个</Link></div>\n\n            </div>\n\n            \n\n        </div>;\n        \n        \n        return <DocumentTitle title={this.props.store.appname}>{main}</DocumentTitle>;\n    }\n}\n\nfunction log( info )\n{\n    console.log( info );\n}","import React, { Component } from 'react';\nimport { observer , inject } from 'mobx-react';\nimport { Link } from \"react-router-dom\";\nimport { withRouter } from 'react-router-dom';\nimport { translate } from 'react-i18next';\n\nimport DocumentTitle from 'react-document-title';\nimport ReactFileReader from 'react-file-reader';\n\nimport { Button, ProgressBar } from \"@blueprintjs/core\";\nimport FileSaver from 'file-saver';\n\n@withRouter\n@translate()\n@inject(\"store\")\n@observer\nexport default class Test2 extends Component\n{\n    state = {\"download_url\":false,\"show_loading\":false};\n    \n    componentDidMount()\n    {\n        this.workerPath = location.href.replace(location.href.split('/').pop(), '') + 'ffmpeg_all.js';\n        this.buffersReady = false ;\n        this.workerReady = false ;\n        this.posted = false;\n        this.worker = false;\n    }\n\n    processInWebWorker() \n    {\n        var blob = URL.createObjectURL(new Blob([`\n        importScripts(\"${this.workerPath}\");\n        var now = Date.now;\n        function print(text) \n        {\n            postMessage({\"type\" : \"stdout\",\"data\" : text});};\n            onmessage = function(event)\n            {\n                var message = event.data;\n                if (message.type === \"command\") \n                {\n                    var Module = {print: print,printErr: print,files: message.files || [],arguments: message.arguments || [],TOTAL_MEMORY: 943718400};\n                    \n                    postMessage({\"type\" : \"start\",\"data\" : Module.arguments.join(\" \")});\n                    \n                    postMessage({\"type\" : \"stdout\",\"data\" : \"Received command: \" +Module.arguments.join(\" \") +((Module.TOTAL_MEMORY) ? \".  Processing with \" + Module.TOTAL_MEMORY + \" bits.\" : \"\")});var time = now();var result = ffmpeg_run(Module);var totalTime = now() - time;postMessage({\"type\" : \"stdout\",\"data\" : \"Finished processing (took \" + totalTime + \"ms)\"});postMessage({\"type\" : \"done\",\"data\" : result,\"time\" : totalTime});}};postMessage({\"type\" : \"ready\"});`], {\n            type: 'application/javascript'\n        }));\n    \n        var worker = new Worker(blob);\n        URL.revokeObjectURL(blob);\n        return worker;\n    }\n    \n    ts1_uploaded( files )\n    {\n        const file = files[0];\n        this.ts1Blob = new Blob([file],{type:'video/mp2t'}); \n\n        console.log( file );\n    }\n\n    ts2_uploaded( files )\n    {\n        const file = files[0];\n        this.ts2Blob = new Blob([file],{type:'video/mp2t'});\n        console.log( file );\n    }\n\n    convert()\n    {\n        this.setState({\"show_loading\":true});\n        \n        var fileReader1 = new FileReader();\n        fileReader1.onload = (e)=> {\n            console.log( e );\n            \n            this.ts1_data = e.target.result;\n            if( this.ts2_data ) this.buffersReady = true;\n            if( this.buffersReady && this.workerReady && !this.posted )\n                this.postMessage();\n        };\n\n        var fileReader2 = new FileReader();\n        fileReader2.onload = (e)=> {\n            this.ts2_data = e.target.result;\n            if( this.ts1_data ) this.buffersReady = true;\n            if( this.buffersReady && this.workerReady && !this.posted )\n                this.postMessage();\n        };\n\n        // console.log( typeof this.ts1Blob )\n\n        fileReader1.readAsArrayBuffer(this.ts1Blob);\n        fileReader2.readAsArrayBuffer(this.ts2Blob);\n        //console.log( \"convert\" );\n        if( !this.worker )\n        {\n            this.worker = this.processInWebWorker();\n        }\n\n        this.worker.onmessage = (event)=> \n        {\n            var message = event.data;\n            if (message.type == \"ready\") \n            {\n                log('<a href=\"'+ this.workerPath +'\" download=\"ffmpeg-asm.js\">ffmpeg-asm.js</a> file has been loaded.');\n                this.workerReady = true;\n\n                if (this.buffersReady) \n                    this.postMessage();\n                else\n                    console.log( \"buffer is not ready\" );\n            \n            } \n            else if (message.type == \"stdout\") \n            {\n                // log(message.data);\n            }\n            else if (message.type == \"start\") \n            {\n                this.setState({\"show_loading\":true});\n                log('<a href=\"'+ this.workerPath +'\" download=\"ffmpeg-asm.js\">ffmpeg-asm.js</a> file received ffmpeg command.');\n            }\n            else if (message.type == \"done\") \n            {\n                console.log(JSON.stringify(message));\n    \n                var result = message.data[0];\n                console.log(JSON.stringify(result));\n    \n                var blob = new Blob([result.data], {\n                    type: 'video/mp4'\n                });\n    \n                console.log(JSON.stringify(blob));\n    \n                this.PostBlob(blob);\n            }\n        };\n    }\n\n    postMessage() \n    {\n        console.log( \"in  post message\" );\n        this.posted = true;\n\t\t\n\t\t/*\n\t\t\t[\n                '-i', 'video.webm',\n                '-i', 'ts2.wav',\n\t\t\t\t'-s', '1280x720',\n                '-c:v', 'mpeg4',\n                '-c:a', 'aac',\n                '-b:v', '1450k',\n                '-b:a', '96k',\n\t\t\t\t'-bf', '2',\n\t\t\t\t'-g', '90',\n\t\t\t\t'-sc_threshold', '0',\n\t\t\t\t'-ar', '32000',\n                '-strict', 'experimental', 'output.mp4'\n            ]\n\t\t*/\n\t\t\n\t\tthis.worker.postMessage({\n            type: 'command',\n            arguments: [\n                '-safe', '0',\n                '-f', 'concat',\n                '-i', 'list.txt',\n                '-c:v', 'libx264',\n                '-vf','pad=ceil(iw/2)*2:ceil(ih/2)*2',\n                '-strict','-2',\n                // '-c:a', 'aac',\n                // '-b:v', '1450k',\n                // '-b:a', '96k',\n\t\t\t\t// '-bf', '2',\n\t\t\t\t// '-g', '90',\n\t\t\t\t// '-sc_threshold', '0',\n                // '-ar', '32000',\n                //'-s','TOTAL_MEMORY=943718400', // 900M\n                // TOTAL_MEMORY=X with X higher than the current value 268435456\n                // Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value 268435456, (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.\n                'output.mp4'\n            ],\n            files: [\n                {\n                    data: new Uint8Array(this.ts1_data),\n                    name: 'ts1.mp4'\n                },\n                {\n                    data: new Uint8Array(this.ts2_data),\n                    name: 'ts2.mp4'\n                },\n                {\n                    //data: new Uint8Array(new Blob([\"file ts1.ts\"+\"\\r\\n\"+\"file ts2.ts\"],{\"type\":\"text/plain\"})),\n                    data: new TextEncoder().encode(  \"file ts1.mp4\"+\"\\r\\n\"+\"file ts2.mp4\" ),\n                    name: 'list.txt' \n                }\n            ]\n        });\n    };\n\n    PostBlob(blob)\n    {\n        FileSaver( blob , 'all.mp4' );\n        this.setState({\"show_loading\":false});\n        console.log( \"done\" );\n        ///this.setState( {\"download_url\":URL.createObjectURL(blob)} )\n    }\n    \n    render()\n    {\n        const main = <div>\n\n<div className=\" center-800 top-100\">\n            <h1>两个 mp4 合成一个</h1>\n            <div className=\"oneline\">\n                <div className=\"left\"> <ReactFileReader fileTypes={[\".mp4\"]} handleFiles={(e)=>this.ts1_uploaded(e)}>\n            <Button large={true} icon=\"video\">选择一个MP4</Button>\n            </ReactFileReader></div>\n                <div className=\"middle\">\n                <ReactFileReader fileTypes={[\".mp4\"]} handleFiles={(e)=>this.ts2_uploaded(e)}>\n            <Button large={true} icon=\"video\">再选择一个同样分辨率的MP4</Button>\n            </ReactFileReader>\n                </div>\n                <div className=\"right\">\n                <Button large={true} icon=\"build\" onClick={()=>this.convert()}>开始合成</Button>\n                </div>\n            </div>\n\n            <div className=\"row center-800 top-20\">\n               {this.state.show_loading && <ProgressBar/> }\n            </div>\n\n            <div className=\"row center-800\">\n                { this.state.download_url && <a href={this.state.download_url}>Download Recorded Audio+Canvas file in MP4 container and play in VLC player!</a> }\n            </div>\n\n            <div className=\"link top-20\"><Link to=\"/\" >jpg + mp3合成 mp4</Link></div>\n\n            </div>\n            \n            \n        </div>;\n        \n        \n        return <DocumentTitle title={this.props.store.appname}>{main}</DocumentTitle>;\n    }\n}\n\nfunction log( info )\n{\n    console.log( info );\n}","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport Login from './screen/Login';\nimport Test from './screen/Test'; \nimport Test2 from './screen/Test2'; \n\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route path=\"/t2\" component={Test2} />\n          <Route path=\"/\" component={Test} />\n          <Route path=\"/Login\" component={Login} />\n        </Switch>\n      </Router>  \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { observable, action } from \"mobx\";\nimport axios from 'axios';\n\nclass AppState\n{\n    @observable appname = \"EasyStarter\";    \n}\n\nexport default new AppState();","import i18n from 'i18next';\nimport Backend from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { reactI18nextModule } from 'react-i18next';\nimport axios from 'axios';\n\n\nconst dev_api = 'http://localhost:8088/';\n\ni18n\n  .use(Backend)\n  .use(LanguageDetector)\n  .use(reactI18nextModule)\n  .init({\n    fallbackLng: 'zh-cn',\n\n    // have a common namespace used around the full app\n    ns: ['translations'],\n    defaultNS: 'translations',\n\n    debug: false,\n    saveMissing:false,\n    missingKeyHandler: function(lng, ns, key) {\n        var params = new URLSearchParams();\n        params.append(\"lng\" , JSON.stringify( lng ));\n        params.append(\"ns\" ,  ns );\n        params.append(\"key\" , key );\n        const { data } = axios.post( dev_api + 'misswords' , params );\n    },\n    interpolation: {\n      escapeValue: false, // not needed for react!!\n    },\n\n    react: {\n      wait: true\n    }\n  });\n\n\nexport default i18n;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from \"mobx-react\";\nimport AppState from './store/AppState';\n\nimport './index.scss';\n\nimport { I18nextProvider } from 'react-i18next';\nimport i18n from './i18n'; \n\nReactDOM.render(<Provider store={AppState}>\n                    <I18nextProvider i18n={ i18n }>\n                        <App />\n                    </I18nextProvider>    \n                </Provider>, document.getElementById('root'));\nserviceWorker.unregister();\n\n"],"sourceRoot":""}